import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import cnn.Convolution;
import cnn.ReLU;
import cnn.MaxPool;
import cnn.Sigmoid;
import UTIL.Mat;
import cnn.Discriminator;

public class DCGAN {
    public static void trainDiscriminator(Discriminator discriminator, GeneratorModel generator, String realImagePath, int numRealImages, int numFakeImages) throws IOException {
        int correctPredictions = 0;
        int totalPredictions = 0;
        int label_counter = 0;
        float ce_loss=0;
        int correct_predictions_batch = 0;
        int total_predictions_batch = 0;
        float acc_sum=0.0f;
        float learn_rate=1e-6f;

        // Train on real images
        for (int i = 0; i < numRealImages; i++) {
            BufferedImage realImage = ImageIO.read(new File(realImagePath + File.separator + i + ".png"));
            float[][] output = discriminator.forward(realImage);
            correctPredictions += output[0][0] > 0.5 ? 1 : 0;
            totalPredictions++;
        }

        // Train on fake images generated by the generator
        for (int i = 0; i < numFakeImages; i++) {
            float[] input = generateInputForGenerator(); // Generate random input for the generator
            float[] fakeOutput = generator.generate(input); // Generate fake image
            BufferedImage fakeImage = createBufferedImage(fakeOutput); // Convert fake image array to BufferedImage

            // Integrate CNN components here
            float[][][] out = conv.forward(pxl); // Assuming 'conv' is your convolution object
            out = relu.forward(out); // Assuming 'relu' is your ReLU object
            out = pool.forward(out); // Assuming 'pool' is your MaxPool object
            float[][] out_l = softmax.forward(out); // Assuming 'softmax' is your SoftMax object

            float[][] gradient = Mat.v_zeros(10); // Assuming 'Mat.v_zeros' is your method to create zero-filled matrix
            gradient[0][0] = 1; // Assuming binary classification, setting the gradient for fake image as 1
            float[][][] sm_gradient = softmax.backprop(gradient, learn_rate);
            float[][][] mp_gradient = pool.backprop(sm_gradient);
            float[][][] relu_gradient = relu.backprop(mp_gradient);
            conv.backprop(relu_gradient, learn_rate);

            float[][] output = discriminator.forward(fakeImage); // Pass fake image to discriminator
            correctPredictions += output[0][0] <= 0.5 ? 1 : 0;
            totalPredictions++;
        }

        // Calculate accuracy
        float accuracy = (float) correctPredictions / totalPredictions * 100;
        System.out.println("Discriminator accuracy: " + accuracy + "%");
    }
}
